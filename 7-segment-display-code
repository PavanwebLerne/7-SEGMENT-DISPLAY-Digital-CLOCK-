// Segment patterns for common-anode (0 = ON, 1 = OFF)
byte segValue[10][7] = {
   {0, 0, 0, 0, 0, 0, 1}, //0
   {1, 0, 0, 1, 1, 1, 1}, //1
   {0, 0, 1, 0, 0, 1, 0}, //2
   {0, 0, 0, 0, 1, 1, 0}, //3
   {1, 0, 0, 1, 1, 0, 0}, //4
   {0, 1, 0, 0, 1, 0, 0}, //5
   {0, 1, 0, 0, 0, 0, 0}, //6
   {0, 0, 0, 1, 1, 1, 1}, //7
   {0, 0, 0, 0, 0, 0, 0}, //8
   {0, 0, 0, 0, 1, 0, 0}  //9  
};

const byte segPin[8]={3, 4, 5, 6, 7, 8, 9, 10}; //{a,b,c,d,e,f,g,dp}
const byte digitPin[6] = {A0, A1, A2, A3, A4, A5}; //segment 

const byte interruptPin = 2;

boolean state = false;
extern volatile unsigned long timer0_millis; 
unsigned long readTime; 
int hour, min, sec;

void setup() {
  Serial.begin(9600);  
  
  pinMode(interruptPin, INPUT_PULLUP); 
  attachInterrupt(digitalPinToInterrupt(interruptPin), switchFn, FALLING);
  
  for(int i=0; i<8; i++){
    pinMode(segPin[i], OUTPUT);
  }
  for(int j=0; j<6; j++){
    pinMode(digitPin[j], OUTPUT);    
    digitalWrite(digitPin[j], LOW); // Initialize to LOW (off)
  }  
}

void loop() {   
  if(Serial.available()){
    String inString = Serial.readStringUntil('\n');    
    int index1 = inString.indexOf(':'); 
    int index2 = inString.indexOf(':', index1+1);   
    int index3 = inString.length();
    
    hour = inString.substring(0, index1).toInt();
    min = inString.substring(index1+1, index2).toInt();
    sec = inString.substring(index2+1, index3).toInt(); 
    
    timer0_millis = ((long)hour*3600 + min*60 + sec) * 1000;   
  } 
  readTime = millis() / 1000;
  if(millis() >= 86400000) // 24 hours
  {
     timer0_millis = 0;
  }
  sec = readTime % 60;
  min = (readTime / 60) % 60;
  hour = (readTime / (60*60)) % 24; 

  if(state == true){ //12 or 24
    hour = hour % 12;
  } 
  segOutput(5, sec % 10, 0); //sec 1
  segOutput(4, sec / 10, 0); //sec 1
  segOutput(3, min % 10, 1); //min 1
  segOutput(2, min / 10, 0); //min 10
  segOutput(1, hour % 10, 1); //hour 1
  segOutput(0, hour / 10, 0); //hour 10     
}

//12 or 24
void switchFn(){
  state = !state;
}

//LED 
void segClear(){ 
  for(int i=0; i<8; i++){
    digitalWrite(segPin[i], HIGH); // Turn off all segments
  }
}

//LED 
void segOutput(int d, int Number, int dp){ 
  segClear();
  digitalWrite(digitPin[d], HIGH); // Activate the digit
  for(int i=0; i<7; i++){
     digitalWrite(segPin[i], segValue[Number][i]);        
  }
  digitalWrite(segPin[7], dp);
  delayMicroseconds(6000);
  digitalWrite(digitPin[d], LOW); // Deactivate the digit
}
